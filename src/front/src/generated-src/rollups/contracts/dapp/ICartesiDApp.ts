/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type OutputValidityProofStruct = {
  inputIndexWithinEpoch: PromiseOrValue<BigNumberish>;
  outputIndexWithinInput: PromiseOrValue<BigNumberish>;
  outputHashesRootHash: PromiseOrValue<BytesLike>;
  vouchersEpochRootHash: PromiseOrValue<BytesLike>;
  noticesEpochRootHash: PromiseOrValue<BytesLike>;
  machineStateHash: PromiseOrValue<BytesLike>;
  outputHashInOutputHashesSiblings: PromiseOrValue<BytesLike>[];
  outputHashesInEpochSiblings: PromiseOrValue<BytesLike>[];
};

export type OutputValidityProofStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  string[],
  string[]
] & {
  inputIndexWithinEpoch: BigNumber;
  outputIndexWithinInput: BigNumber;
  outputHashesRootHash: string;
  vouchersEpochRootHash: string;
  noticesEpochRootHash: string;
  machineStateHash: string;
  outputHashInOutputHashesSiblings: string[];
  outputHashesInEpochSiblings: string[];
};

export type ProofStruct = {
  validity: OutputValidityProofStruct;
  context: PromiseOrValue<BytesLike>;
};

export type ProofStructOutput = [OutputValidityProofStructOutput, string] & {
  validity: OutputValidityProofStructOutput;
  context: string;
};

export interface ICartesiDAppInterface extends utils.Interface {
  functions: {
    "executeVoucher(address,bytes,((uint64,uint64,bytes32,bytes32,bytes32,bytes32,bytes32[],bytes32[]),bytes))": FunctionFragment;
    "getConsensus()": FunctionFragment;
    "getTemplateHash()": FunctionFragment;
    "migrateToConsensus(address)": FunctionFragment;
    "validateNotice(bytes,((uint64,uint64,bytes32,bytes32,bytes32,bytes32,bytes32[],bytes32[]),bytes))": FunctionFragment;
    "wasVoucherExecuted(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "executeVoucher"
      | "getConsensus"
      | "getTemplateHash"
      | "migrateToConsensus"
      | "validateNotice"
      | "wasVoucherExecuted"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeVoucher",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>, ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsensus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTemplateHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToConsensus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateNotice",
    values: [PromiseOrValue<BytesLike>, ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "wasVoucherExecuted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTemplateHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateToConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateNotice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wasVoucherExecuted",
    data: BytesLike
  ): Result;

  events: {
    "NewConsensus(address)": EventFragment;
    "VoucherExecuted(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewConsensus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherExecuted"): EventFragment;
}

export interface NewConsensusEventObject {
  newConsensus: string;
}
export type NewConsensusEvent = TypedEvent<[string], NewConsensusEventObject>;

export type NewConsensusEventFilter = TypedEventFilter<NewConsensusEvent>;

export interface VoucherExecutedEventObject {
  voucherId: BigNumber;
}
export type VoucherExecutedEvent = TypedEvent<
  [BigNumber],
  VoucherExecutedEventObject
>;

export type VoucherExecutedEventFilter = TypedEventFilter<VoucherExecutedEvent>;

export interface ICartesiDApp extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICartesiDAppInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeVoucher(
      _destination: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _proof: ProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Get the current consensus.
     */
    getConsensus(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Get the DApp's template hash.
     */
    getTemplateHash(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Can only be called by the DApp owner.
     * Migrate the DApp to a new consensus.
     * @param _newConsensus The new consensus
     */
    migrateToConsensus(
      _newConsensus: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateNotice(
      _notice: PromiseOrValue<BytesLike>,
      _proof: ProofStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Check whether a voucher has been executed.
     * @param _inputIndex The index of the input in the input box
     * @param _outputIndexWithinInput The index of output emitted by the input
     */
    wasVoucherExecuted(
      _inputIndex: PromiseOrValue<BigNumberish>,
      _outputIndexWithinInput: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  executeVoucher(
    _destination: PromiseOrValue<string>,
    _payload: PromiseOrValue<BytesLike>,
    _proof: ProofStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Get the current consensus.
   */
  getConsensus(overrides?: CallOverrides): Promise<string>;

  /**
   * Get the DApp's template hash.
   */
  getTemplateHash(overrides?: CallOverrides): Promise<string>;

  /**
   * Can only be called by the DApp owner.
   * Migrate the DApp to a new consensus.
   * @param _newConsensus The new consensus
   */
  migrateToConsensus(
    _newConsensus: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateNotice(
    _notice: PromiseOrValue<BytesLike>,
    _proof: ProofStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Check whether a voucher has been executed.
   * @param _inputIndex The index of the input in the input box
   * @param _outputIndexWithinInput The index of output emitted by the input
   */
  wasVoucherExecuted(
    _inputIndex: PromiseOrValue<BigNumberish>,
    _outputIndexWithinInput: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    executeVoucher(
      _destination: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _proof: ProofStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Get the current consensus.
     */
    getConsensus(overrides?: CallOverrides): Promise<string>;

    /**
     * Get the DApp's template hash.
     */
    getTemplateHash(overrides?: CallOverrides): Promise<string>;

    /**
     * Can only be called by the DApp owner.
     * Migrate the DApp to a new consensus.
     * @param _newConsensus The new consensus
     */
    migrateToConsensus(
      _newConsensus: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateNotice(
      _notice: PromiseOrValue<BytesLike>,
      _proof: ProofStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Check whether a voucher has been executed.
     * @param _inputIndex The index of the input in the input box
     * @param _outputIndexWithinInput The index of output emitted by the input
     */
    wasVoucherExecuted(
      _inputIndex: PromiseOrValue<BigNumberish>,
      _outputIndexWithinInput: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewConsensus(address)"(newConsensus?: null): NewConsensusEventFilter;
    NewConsensus(newConsensus?: null): NewConsensusEventFilter;

    "VoucherExecuted(uint256)"(voucherId?: null): VoucherExecutedEventFilter;
    VoucherExecuted(voucherId?: null): VoucherExecutedEventFilter;
  };

  estimateGas: {
    executeVoucher(
      _destination: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _proof: ProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Get the current consensus.
     */
    getConsensus(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the DApp's template hash.
     */
    getTemplateHash(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Can only be called by the DApp owner.
     * Migrate the DApp to a new consensus.
     * @param _newConsensus The new consensus
     */
    migrateToConsensus(
      _newConsensus: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateNotice(
      _notice: PromiseOrValue<BytesLike>,
      _proof: ProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Check whether a voucher has been executed.
     * @param _inputIndex The index of the input in the input box
     * @param _outputIndexWithinInput The index of output emitted by the input
     */
    wasVoucherExecuted(
      _inputIndex: PromiseOrValue<BigNumberish>,
      _outputIndexWithinInput: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeVoucher(
      _destination: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _proof: ProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Get the current consensus.
     */
    getConsensus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the DApp's template hash.
     */
    getTemplateHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Can only be called by the DApp owner.
     * Migrate the DApp to a new consensus.
     * @param _newConsensus The new consensus
     */
    migrateToConsensus(
      _newConsensus: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateNotice(
      _notice: PromiseOrValue<BytesLike>,
      _proof: ProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Check whether a voucher has been executed.
     * @param _inputIndex The index of the input in the input box
     * @param _outputIndexWithinInput The index of output emitted by the input
     */
    wasVoucherExecuted(
      _inputIndex: PromiseOrValue<BigNumberish>,
      _outputIndexWithinInput: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
