/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IHistoryInterface extends utils.Interface {
  functions: {
    "getClaim(address,bytes)": FunctionFragment;
    "migrateToConsensus(address)": FunctionFragment;
    "submitClaim(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getClaim" | "migrateToConsensus" | "submitClaim"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getClaim",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToConsensus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateToConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IHistory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IHistoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Get a specific claim regarding a specific DApp.         The encoding of `_proofContext` might vary         depending on the history implementation.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: PromiseOrValue<string>,
      _proofContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        epochHash_: string;
        firstInputIndex_: BigNumber;
        lastInputIndex_: BigNumber;
      }
    >;

    /**
     * Should have access control.
     * Transfer ownership to another consensus.
     * @param _consensus The new consensus
     */
    migrateToConsensus(
      _consensus: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Should have access control.
     * Submit a claim.         The encoding of `_claimData` might vary         depending on the history implementation.
     * @param _claimData Data for submitting a claim
     */
    submitClaim(
      _claimData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Get a specific claim regarding a specific DApp.         The encoding of `_proofContext` might vary         depending on the history implementation.
   * @param _dapp The DApp address
   * @param _proofContext Data for retrieving the desired claim
   */
  getClaim(
    _dapp: PromiseOrValue<string>,
    _proofContext: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      epochHash_: string;
      firstInputIndex_: BigNumber;
      lastInputIndex_: BigNumber;
    }
  >;

  /**
   * Should have access control.
   * Transfer ownership to another consensus.
   * @param _consensus The new consensus
   */
  migrateToConsensus(
    _consensus: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Should have access control.
   * Submit a claim.         The encoding of `_claimData` might vary         depending on the history implementation.
   * @param _claimData Data for submitting a claim
   */
  submitClaim(
    _claimData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Get a specific claim regarding a specific DApp.         The encoding of `_proofContext` might vary         depending on the history implementation.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: PromiseOrValue<string>,
      _proofContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        epochHash_: string;
        firstInputIndex_: BigNumber;
        lastInputIndex_: BigNumber;
      }
    >;

    /**
     * Should have access control.
     * Transfer ownership to another consensus.
     * @param _consensus The new consensus
     */
    migrateToConsensus(
      _consensus: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Should have access control.
     * Submit a claim.         The encoding of `_claimData` might vary         depending on the history implementation.
     * @param _claimData Data for submitting a claim
     */
    submitClaim(
      _claimData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    /**
     * Get a specific claim regarding a specific DApp.         The encoding of `_proofContext` might vary         depending on the history implementation.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: PromiseOrValue<string>,
      _proofContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Should have access control.
     * Transfer ownership to another consensus.
     * @param _consensus The new consensus
     */
    migrateToConsensus(
      _consensus: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Should have access control.
     * Submit a claim.         The encoding of `_claimData` might vary         depending on the history implementation.
     * @param _claimData Data for submitting a claim
     */
    submitClaim(
      _claimData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Get a specific claim regarding a specific DApp.         The encoding of `_proofContext` might vary         depending on the history implementation.
     * @param _dapp The DApp address
     * @param _proofContext Data for retrieving the desired claim
     */
    getClaim(
      _dapp: PromiseOrValue<string>,
      _proofContext: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Should have access control.
     * Transfer ownership to another consensus.
     * @param _consensus The new consensus
     */
    migrateToConsensus(
      _consensus: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Should have access control.
     * Submit a claim.         The encoding of `_claimData` might vary         depending on the history implementation.
     * @param _claimData Data for submitting a claim
     */
    submitClaim(
      _claimData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
