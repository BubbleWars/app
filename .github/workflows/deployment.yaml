name: Deploy Bubblewars.io

on:
    push:
        branches:
            - main

jobs:
    build-and-deploy:
        runs-on: self-hosted
        env:
          CARTESI_BLOCKCHAIN_FINALITY_OFFSET: ${{ secrets.CARTESI_BLOCKCHAIN_FINALITY_OFFSET }}
          CARTESI_BLOCKCHAIN_ID: ${{ secrets.CARTESI_BLOCKCHAIN_ID }}
          CARTESI_CONTRACTS_APPLICATION_ADDRESS: ${{ secrets.CARTESI_CONTRACTS_APPLICATION_ADDRESS }}
          CARTESI_CONTRACTS_APPLICATION_DEPLOYMENT_BLOCK_NUMBER: ${{ secrets.CARTESI_CONTRACTS_APPLICATION_DEPLOYMENT_BLOCK_NUMBER }}
          CARTESI_CONTRACTS_AUTHORITY_ADDRESS: ${{ secrets.CARTESI_CONTRACTS_AUTHORITY_ADDRESS }}
          CARTESI_CONTRACTS_HISTORY_ADDRESS: ${{ secrets.CARTESI_CONTRACTS_HISTORY_ADDRESS }}
          CARTESI_CONTRACTS_INPUT_BOX_ADDRESS: ${{ secrets.CARTESI_CONTRACTS_INPUT_BOX_ADDRESS }}
          CARTESI_CONTRACTS_INPUT_BOX_DEPLOYMENT_BLOCK_NUMBER: ${{ secrets.CARTESI_CONTRACTS_INPUT_BOX_DEPLOYMENT_BLOCK_NUMBER }}
          CARTESI_EPOCH_DURATION: ${{ secrets.CARTESI_EPOCH_DURATION }}
          CARTESI_EPOCH_LENGTH: ${{ secrets.CARTESI_EPOCH_LENGTH }}
          CARTESI_AUTH_MNEMONIC: ${{ secrets.CARTESI_AUTH_MNEMONIC }}
          CARTESI_BLOCKCHAIN_HTTP_ENDPOINT: ${{ secrets.CARTESI_BLOCKCHAIN_HTTP_ENDPOINT }}
          CARTESI_BLOCKCHAIN_WS_ENDPOINT: ${{ secrets.CARTESI_BLOCKCHAIN_WS_ENDPOINT }}
          RPC_HTTP_ENDPOINT: ${{ secrets.CARTESI_BLOCKCHAIN_HTTP_ENDPOINT }}
          RPC_WS_ENDPOINT: ${{ secrets.CARTESI_BLOCKCHAIN_WS_ENDPOINT }}
          INSPECTOR_URL: ${{ secrets.INSPECTOR_URL }}
          PRIVY_APP_ID: ${{ secrets.PRIVY_APP_ID }}
          PRIVY_APP_SECRET: ${{ secrets.PRIVY_APP_SECRET }}
          ROLLUP_OWNER_ADDRESS: ${{ secrets.ROLLUP_OWNER_ADDRESS }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v3

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "21.5.0"

            - name: Install pnpm
              run: npm install -g pnpm

            # - name: Install Docker
            #   run: |
            #       # Add Docker's official GPG key:
            #       sudo apt-get update
            #       sudo apt-get install -y ca-certificates curl
            #       sudo install -m 0755 -d /etc/apt/keyrings
            #       sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            #       sudo chmod a+r /etc/apt/keyrings/docker.asc

            #       # Add the repository to Apt sources:
            #       echo \
            #         "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            #         $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            #         sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            #       sudo apt-get update
            #       sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

            # - name: Install Sunodo
            #   run: |
            #     success=false
            #     attempts=0
            #     max_attempts=3
            #     while ! $success && [ $attempts -lt $max_attempts ]; do
            #       pnpm install -g @sunodo/cli && success=true || success=false
            #       attempts=$((attempts + 1))
            #       if ! $success; then
            #         echo "Attempt $attempts to install Sunodo failed. Trying again in 5 seconds..."
            #         sleep 5
            #       fi
            #     done
            #     if ! $success; then
            #       echo "Failed to install Sunodo after $max_attempts attempts."
            #       exit 1
            #     fi

            - name: Install Dependencies
              run: npm install

            - name: Clear Existing PM2 Processes
              run: |
                  pm2 delete blockchain || true
                  pm2 delete node-backend || true
                  pm2 delete state-indexer || true
                  pm2 delete front-end || true
                  pm2 delete faucet-server || true
                  pm2 flush
            
            - name: Clear Existing Docker Containers
              run: |
                  docker stop $(docker ps -aq) || true
                  docker rm -v $(docker ps -aq) || true
                  docker volume prune -f || true
                  docker rmi $(docker images -q) || true
                  docker volume prune -f || true
                  sudo systemctl stop docker || true
                  sudo systemctl start docker || true

            - name: Configure Docker Logging
              run: |
                  echo '{
                      "log-driver": "json-file",
                      "log-opts": {
                          "max-size": "10m",
                          "max-file": "3"
                      }
                  }' | sudo tee /etc/docker/daemon.json
                  sudo systemctl restart docker
            
            - name: Log in to Docker Hub
              run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            - name: Wait for Blockchain Setup
              run: sleep 10 # Adjust the sleep duration as needed

            - name: Set up local Node
              run: pm2 start --name blockchain \
                "docker run -p 10000:10000 \
                --env CARTESI_BLOCKCHAIN_FINALITY_OFFSET=${{ secrets.CARTESI_BLOCKCHAIN_FINALITY_OFFSET }} \
                --env CARTESI_BLOCKCHAIN_ID=${{ secrets.CARTESI_BLOCKCHAIN_ID }} \
                --env CARTESI_CONTRACTS_APPLICATION_ADDRESS=${{ secrets.CARTESI_CONTRACTS_APPLICATION_ADDRESS }} \
                --env CARTESI_CONTRACTS_APPLICATION_DEPLOYMENT_BLOCK_NUMBER=${{ secrets.CARTESI_CONTRACTS_APPLICATION_DEPLOYMENT_BLOCK_NUMBER }} \
                --env CARTESI_CONTRACTS_AUTHORITY_ADDRESS=${{ secrets.CARTESI_CONTRACTS_AUTHORITY_ADDRESS }} \
                --env CARTESI_CONTRACTS_HISTORY_ADDRESS=${{ secrets.CARTESI_CONTRACTS_HISTORY_ADDRESS }} \
                --env CARTESI_CONTRACTS_INPUT_BOX_ADDRESS=${{ secrets.CARTESI_CONTRACTS_INPUT_BOX_ADDRESS }} \
                --env CARTESI_CONTRACTS_INPUT_BOX_DEPLOYMENT_BLOCK_NUMBER=${{ secrets.CARTESI_CONTRACTS_INPUT_BOX_DEPLOYMENT_BLOCK_NUMBER }} \
                --env CARTESI_EPOCH_DURATION=${{ secrets.CARTESI_EPOCH_DURATION }} \
                --env CARTESI_AUTH_MNEMONIC=${{ secrets.CARTESI_AUTH_MNEMONIC }} \
                --env CARTESI_BLOCKCHAIN_HTTP_ENDPOINT=${{ secrets.CARTESI_BLOCKCHAIN_HTTP_ENDPOINT }} \
                --env CARTESI_BLOCKCHAIN_WS_ENDPOINT=${{ secrets.CARTESI_BLOCKCHAIN_WS_ENDPOINT }} \
                --env RPC_HTTP_ENDPOINT=${{ secrets.CARTESI_BLOCKCHAIN_HTTP_ENDPOINT }} \
                --env RPC_WS_ENDPOINT=${{ secrets.CARTESI_BLOCKCHAIN_WS_ENDPOINT }} \
                --env INSPECTOR_URL=${{ secrets.INSPECTOR_URL }} \
                --env PRIVY_APP_ID=${{ secrets.PRIVY_APP_ID }} \
                --env PRIVY_APP_SECRET=${{ secrets.PRIVY_APP_SECRET }} \
                --env ROLLUP_OWNER_ADDRESS=${{ secrets.ROLLUP_OWNER_ADDRESS }} \
                ultimateurinater/bubblewars-sepolia:latest"

            

            # - name: Start Node Backend
            #   run: |
            #       npm i
            #       pm2 start --name node-backend "npm run host"
            
            - name: Start State Indexing Server
              run: |
                  cd src/indexer
                  npm i
                  pm2 start --name state-indexer "npm run host"


            # - name: Wait for Backend Setup
            #   run: sleep 20 # Adjust the sleep duration as needed

            - name: Run Front End
              run: |
                  cd src/front
                  npm i
                  npm run build
                  cd dist
                  pm2 start --name front-end "npx serve -l 80 -d "

            # - name: Wait for Front-End Setup
            #   run: sleep 20 # Adjust the sleep duration as needed

            - name: Free Port 2001
              run: |
                  if lsof -Pi :2001 -sTCP:LISTEN -t >/dev/null ; then
                    kill -9 $(lsof -t -i:2001)
                  fi

            # - name: Deploy Faucet Server
            #   run: |
            #       cd src/front
            #       pnpm install @latticexyz/faucet
            #       pm2 start --name faucet-server "RPC_HTTP_URL=http://localhost:8545 FAUCET_PRIVATE_KEY="0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80" DRIP_AMOUNT_ETHER=200 PORT=2001 pnpm faucet-server"

            - name: Save PM2 Process List
              run: pm2 save

            - name: Setup PM2 to Resurrect on Reboot
              run: pm2 startup
